### Correction
# just for override the default cpp #include snippet over the c one
snippet! inc
	#include<${1:iostream}>
	${0}
snippet! fori "for loop with index"
	for(${5:int} ${1:i} = ${2:0}; $1 < ${3:count}; ${4:++}$1) {
		${6}
	}
## STL Collections
# array
snippet! array
	array<${1:T}, ${2:N}> ${3};
	${0}
# vector
snippet! vector
	vector<${1:T}> ${2};
	${0}
# deque
snippet! deque
	deque<${1:T}> ${2};
	${0}
# forward_list
snippet! flist
	forward_list<${1:T}> ${2};
	${0}
# list
snippet! list
	list<${1:T}> ${2};
	${0}
# set
snippet! set
	set<${1:T}> ${2};
	${0}
# map
snippet! map
	map<${1:Key}, ${2:T}> ${3};
	${0}
# multiset
snippet! mset
	multiset<${1:T}> ${2};
	${0}
# multimap
snippet! mmap
	multimap<${1:Key}, ${2:T}> ${3};
	${0}
# unordered_set
snippet! uset
	unordered_set<${1:T}> ${2};
	${0}
# unordered_map
snippet! umap
	unordered_map<${1:Key}, ${2:T}> ${3};
	${0}
# unordered_multiset
snippet! umset
	unordered_multiset<${1:T}> ${2};
	${0}
# unordered_multimap
snippet! ummap
	unordered_multimap<${1:Key}, ${2:T}> ${3};
	${0}
# stack
snippet! stack
	stack<${1:T}> ${2};
	${0}
# queue
snippet! queue
	queue<${1:T}> ${2};
	${0}
# priority_queue
snippet! pqueue
	priority_queue<${1:T}> ${2};
	${0}
## Input/Output
# cout
snippet! cout
	cout << ${0} << endl;
# cin
snippet! cin
	cin >> ${0};
## Functions
# Get accessor
snippet getvar
	inline const ${2:auto} get${1/\([a-zA-Z]*\)\(_*\)/\u\1/g}(${3:void}) ${4:const}
	{
	  return ${1:Var};
	}
# Bool accessor
snippet isvar
	inline const bool is${1/\([a-zA-Z]*\)\(_*\)/\u\1/g}(${2:void}) const
	{
	  return ${1:Var};
	}
# Set accessor
snippet setvar
	inline void set${1/\([a-zA-Z]*\)\(_*\)/\u\1/g}(const ${2:type}  &local_${1/\([a-zA-Z]*\)\(_*\)/\1/g})
	{
	  ${1:Var} = local_${1/\([a-zA-Z]*\)\(_*\)/\1/g};
	}
## Debug
# Print Pointer Container elements
snippet ppstl
	cout << "$1 :" << endl;
	copy(${1:var}->cbegin(),$1->cend(),ostream_iterator<${2:int}>(${3:cout}," "));
	cout << endl;
# Print Container elements
snippet pstl
	cout << "$1 :" << endl;
	copy(${1:var}.cbegin(),$1.cend(),ostream_iterator<${2:int}>(${3:cout}," "));
	cout << endl;
## Loop
# 2 nested for-loops where i and j both increases
snippet ffor
	for (${1:int} ${2:i}=0; $2<${4:M}; $2++) {
		for ($1 ${3:j}=0; $3<${5:N}; $3++) {
			${6}
		}
	}
# 3 nested for-loops where i,j and k increases
snippet fffor
	for (${1:int} ${2:i}=0; $2<${5:L}; $2++) {
		for ($1 ${3:j}=0; $3<${6:M}; $3++) {
			for ($1 ${4:k}=0; $4<${7:N}; $4++) {
				${8}
			}
		}
	}
## Control
# namespace std
snippet uns
	using namespace std;
	${0}
# template
snippet temp "template header"
	template<typename ${1:Type}>
